<script defer>
    //path of page declaration
    var path = "collectionMoney";
    //settings from data base
    var settings = '<%-settings%>';
    settings = JSON.parse(settings); //parse to get object


    // game elements declaration
    var progressBar = document.getElementById("progressBar");
    var againBtn = document.getElementById("againBtn");
    var wallet = document.getElementById("wallet");
    var basket = document.getElementById("basket");

    // game views declaration
    var games = document.getElementsByClassName("game");
    var [collectionMoney, selectionGoods, paymentPurchase, takeChangee] = [...games];

    // pagination buttons declaration;
    var collectionMoneyBtn = document.getElementById("collectionMoneyBtn");
    var selectionGoodsBtn = document.getElementById("selectionGoodsBtn");
    var paymentPurchaseBtn = document.getElementById("paymentPurchaseBtn");
    var takeChangeeBtn = document.getElementById("takeChangeeBtn");

    var paginationBtns = [collectionMoneyBtn, selectionGoodsBtn, paymentPurchaseBtn, takeChangeeBtn];

    var hostName = '<%-host%>';

    // changers declaration
    var nextBackBtnsChanger = document.getElementById("nextBackBtnsChanger");
    var progressBarChanger = document.getElementById("progressBarChanger");
    var againBtnChanger = document.getElementById("againBtnChanger");
    var walletChanger = document.getElementById("walletChanger");
    var basketChanger = document.getElementById("basketChanger");
    var submitBtn = document.getElementById("submitBtn");

    // main part
    paginationLogic();

    // listeners of pagination buttons
    collectionMoneyBtn.addEventListener("click", pageChanger);
    selectionGoodsBtn.addEventListener("click", pageChanger);
    paymentPurchaseBtn.addEventListener("click", pageChanger);
    takeChangeeBtn.addEventListener("click", pageChanger);

    // listeners of changers
    nextBackBtnsChanger.addEventListener('change', changePairElems);
    progressBarChanger.addEventListener('change', changeElem);
    againBtnChanger.addEventListener('change', changeElem);
    walletChanger.addEventListener('change', changeElem);
    basketChanger.addEventListener('change', changeElem);

    // input values from DB
    nextBackBtnsChanger.value = getValue(settings.nextBtn);
    progressBarChanger.checked = settings.progressBar;
    againBtnChanger.value = getValue(settings.againBtn);
    walletChanger.value = getValue(settings.wallet);
    basketChanger.value = getValue(settings.basket);

    // get values from URLs
    nextBackBtnsChanger.value = getValue(settings.nextBtn);
    progressBarChanger.checked = settings.progressBar;
    againBtnChanger.value = getValue(settings.againBtn);
    walletChanger.value = getValue(settings.wallet);
    basketChanger.value = getValue(settings.basket);

    showFromDB(progressBarChanger);

    //end of main part

    // function declaration part
    function pageChanger(elem) {
      paginationBtns.map(item => {
        item.classList.remove("a-active");
      })
      elem.target.classList.add("a-active");
      switch (elem.target.id) {
        case "collectionMoneyBtn":
          path = "collectionMoney";
          paginationLogic();
          break;

        case "selectionGoodsBtn":
          path = "selectionGoods";
          paginationLogic();
          break;

        case "paymentPurchaseBtn":
          path = "paymentPurchase";
          paginationLogic();
          break;

        case "takeChangeeBtn":
          path = "takeChangee";
          paginationLogic();
          break;

        default:
          break;
      }
    }

    function paginationLogic() {
      hideAllGames();

      // udachi tebe eto ponyat' Vlad
      [againBtnChanger, basketChanger, walletChanger].map(item => {
        setDisableChanger(false, item);
      })

      switch (path) {
          case "collectionMoney":
              collectionMoney.style.display = "block";

              setDisableChanger(true, againBtnChanger);
              setDisableChanger(true, basketChanger);
              ////////////////////////////////////////////
              nextBtn.src = settings.nextBtn;
              wallet.src = settings.wallet;
              break;

          case "selectionGoods":
              selectionGoods.style.display = "block";

              setDisableChanger(true, againBtnChanger);
              setDisableChanger(true, walletChanger);
              ////////////////////////////////////////////
              backBtn.src = settings.backBtn;
              nextBtn.src = settings.nextBtn;
              basket.src = settings.basket;
              break;

          case "paymentPurchase":
              paymentPurchase.style.display = "block";

              setDisableChanger(true, againBtnChanger);
              setDisableChanger(true, basketChanger);
              ////////////////////////////////////////////
              backBtn.src = settings.backBtn;
              nextBtn.src = settings.nextBtn;
              wallet.src = settings.wallet;
              break;

          case "takeChangee":
              takeChangee.style.display = "block";

              setDisableChanger(true, basketChanger);
              ////////////////////////////////////////////
              backBtn.src = settings.backBtn;
              againBtn.src = settings.againBtn;
              wallet.src = settings.wallet;
              break;

          default:
              break;
      }
    }

    function hideAllGames() {
      for (let game of games)
        game.style.display = "none";
    }

    function setDisableChanger(bool, elem) {
      console.log(bool);
        if (bool || bool == undefined) {
          elem.classList.add("disabled");
          elem.setAttribute("disabled", "disabled");

          var label = elem.parentElement;
          label.classList.add("disabled");
        } else {
          elem.classList.remove("disabled");
          elem.setAttribute("disabled", "");

          var label = elem.parentElement;
          label.classList.remove("disabled");
        }

    }

    // change alone element
    function changeElem() {
        if (this.getAttribute('type') == 'checkbox') {
            this.checked ? progressBar.classList.remove('none') : progressBar.classList.add('none');
        }

        else {
            var searchId = this.id.toString().replace('Changer', '');
            var elem = document.getElementById(searchId);

            var imagePath = elem.src;
            imagePath = imagePath.replace(/\w.png/, `${this.value}.png`);
            elem.src = imagePath;
        }
    }

    // change pair elements
    function changePairElems() {
      if (this.id == "nextBackBtnsChanger") {
          var imagePathNextBtn = document.getElementById('nextBtn').src;
          imagePathNextBtn = imagePathNextBtn.replace(/\w.png/, `${nextBackBtnsChanger.value}.png`);
          document.getElementById('nextBtn').src = imagePathNextBtn;

          console.log(imagePathNextBtn + ' imagePathNextBtn');

          var imagePathBackBtn = document.getElementById('backBtn').src;

          console.log(imagePathBackBtn + ' imagePathBackBtn');

          imagePathBackBtn = imagePathBackBtn.replace(/\w.png/, `${nextBackBtnsChanger.value}.png`);
          document.getElementById('backBtn').src = imagePathBackBtn;
        }
    }

    function showFromDB(changer) {
        if (changer.getAttribute('type') == 'checkbox')
            changer.checked ? progressBar.classList.remove('none') : progressBar.classList.add('none');

        else {
            var searchId = changer.id.toString().replace('Changer', '');
            var elem = document.getElementById(searchId);

            var imagePath = elem.src;
            imagePath = imagePath.replace(/\w.png/, `${this.value}.png`);
            elem.src = imagePath;
        }
    }

    function getValue(areaFromDb) {
        var value = areaFromDb.toString();
        value = value.match(/\d.png/)[0];
        value = value.replace('.png', '');

        // console.log(value);

        return parseInt(value);
    }

    submitBtn.onclick = function () {
        var newSettings = {};

        // т.к для этой игры всегда есть кнопка вперед/назад
        if (backBtn.classList.contains('none')) {
          var imagePathBackBtn = settings.backBtn.replace(/\w.png/, `${nextBackBtnsChanger.value}.png`);
          newSettings.backBtn = imagePathBackBtn;
        }
        else newSettings.backBtn = backBtn.src.replace(/http(s?):\/\//, '').replace(`${hostName}`, '');

        newSettings.progressBar = progressBarChanger.checked;

        if (nextBtn.classList.contains('none')) {
          var imagePathNextBtn = settings.nextBtn.replace(/\w.png/, `${nextBackBtnsChanger.value}.png`);
          newSettings.nextBtn = imagePathNextBtn;
        }
        else newSettings.nextBtn = nextBtn.src.replace(/http(s?):\/\//, '').replace(`${hostName}`, '');

        if (againBtn.classList.contains('none')) newSettings.againBtn = settings.againBtn;
        else newSettings.againBtn = againBtn.src.replace(/http(s?):\/\//, '').replace(`${hostName}`, '');

        if (wallet.classList.contains('none')) newSettings.wallet = settings.wallet;
        else newSettings.wallet = wallet.src.replace(/http(s?):\/\//, '').replace(`${hostName}`, '');

        if (basket.classList.contains('none')) newSettings.basket = settings.basket;
        else newSettings.basket = basket.src.replace(/http(s?):\/\//, '').replace(`${hostName}`, '');

        console.log(newSettings);

        $.ajax({
            type: 'POST',
            url: window.location.pathname,
            dataType: 'json',
            data: newSettings,
            success: console.log('Settings Saved'),
        });
    }
</script>
